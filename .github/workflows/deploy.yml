name: Deploy Maths.pm
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Build static site
        run: |
          python -c "
          import asyncio
          import httpx
          from src import app  # Fixed import path
          import uvicorn
          import threading
          import time
          import sys
          import logging
          
          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          # Start server in background
          def run_server():
              try:
                  uvicorn.run(app, host='127.0.0.1', port=8000, log_level='error')
              except Exception as e:
                  logger.error(f'Server failed to start: {e}')
                  sys.exit(1)
          
          server_thread = threading.Thread(target=run_server, daemon=True)
          server_thread.start()
          
          # Wait for server to be ready
          logger.info('Waiting for server to start...')
          time.sleep(5)
          
          # Build site
          async def build():
              try:
                  async with httpx.AsyncClient(timeout=60.0) as client:
                      # Check server is running
                      health_response = await client.get('http://127.0.0.1:8000/api/health')
                      health_response.raise_for_status()
                      logger.info(f'Server health check: {health_response.json()}')
                      
                      # Trigger build
                      logger.info('Starting static site build...')
                      response = await client.get('http://127.0.0.1:8000/api/build')
                      response.raise_for_status()
                      result = response.json()
                      
                      logger.info(f'Build result: {result}')
                      
                      if result.get('status') == 'success':
                          logger.info(f'‚úÖ Build successful: {result.get(\"successful\")}/{result.get(\"total_routes\")} routes exported')
                          return True
                      else:
                          logger.error(f'‚ö†Ô∏è Build partially failed: {result}')
                          return result.get('status') == 'partial'  # Allow partial success
              except Exception as e:
                  logger.error(f'Build failed with error: {e}')
                  return False
          
          success = asyncio.run(build())
          if not success:
              logger.error('Build failed! Exiting...')
              sys.exit(1)
          else:
              logger.info('Build completed successfully!')
          "
      
      - name: Verify build output
        run: |
          echo "üìÅ Checking dist directory..."
          if [ -d "dist" ]; then
            echo "‚úÖ dist directory exists"
            echo "üìä Contents:"
            ls -la dist/
            echo "üìà Size:"
            du -sh dist/
            echo "üìÑ File count:"
            find dist -type f | wc -l
          else
            echo "‚ùå dist directory not found!"
            exit 1
          fi
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist